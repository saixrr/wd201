# name: PostgreSQL Service Example
# on: push

# jobs:
#   # Label of the runner job
#   runner-job:
#     # You must use a Linux environment when using service containers or container jobs
#     runs-on: ubuntu-latest

#     # Service containers to run with `runner-job`
#     services:
#       # Label used to access the service container
#       postgres:
#         # Docker Hub image
#         image: postgres
#         # Provide the password for postgres
#         env:
#           POSTGRES_PASSWORD: postgres
#         # Set health checks to wait until postgres has started
#         options: >-
#           --health-cmd pg_isready
#           --health-interval 10s
#           --health-timeout 5s
#           --health-retries 5
#         ports:
#           # Maps tcp port 5432 on service container to the host
#           - 5432:5432

#     steps:
#       # Downloads a copy of the code in your repository before running CI tests
#       - name: Check out repository code
#         uses: actions/checkout@v4

#       # Performs a clean installation of all dependencies in the `package.json` file
#       # For more information, see https://docs.npmjs.com/cli/ci.html
#       - name: Install dependencies
#         run: npm ci

#       - name: Connect to PostgreSQL
#         # Runs a script that creates a PostgreSQL table, populates
#         # the table with data, and then retrieves the data
#         run: node client.js
#         # Environment variables used by the `client.js` script to create
#         # a new PostgreSQL table.
#         env:
#           # The hostname used to communicate with the PostgreSQL service container
#           POSTGRES_HOST: localhost
#           # The default PostgreSQL port
#           POSTGRES_PORT: 5432
<<<<<<< HEAD


=======
>>>>>>> 77b5bc32f8ae33a34970dbbb42424f8e26f17aaf
name: CI/CD Pipeline

on:
  push:
    branches:
      - main  # Trigger the pipeline on pushes to the main branch
  pull_request:
    branches:
      - main  # Trigger the pipeline on pull requests targeting the main branch

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Install dependencies
        run: npm install

      - name: Code linting and formatting
        run: npm run lint  # Assuming you have linting scripts in your package.json

      - name: Build
        run: npm run build  # Assuming you have a build script in your package.json

  test:
    runs-on: ubuntu-latest

    needs: build  # Ensure the build job completes before starting the test job

    env:
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
      API_KEY: ${{ secrets.API_KEY }}
      ENVIRONMENT: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Install dependencies
        run: npm install

      - name: Run unit tests
        run: npm test  # Assuming you have unit test scripts in your package.json

      # Add additional test steps for performance, integration, and other types of tests
      - name: Run performance tests
        run: npm run performance-test  # Assuming you have performance test scripts in your package.json

      # Add more test steps as needed for integration, end-to-end, etc.

      # Notify on failure
      - name: Notify on failure
        if: failure()
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"text":"❌ CI/CD Pipeline failed for the main branch. Check the workflow logs for details: ${{ github.workflow }}"}' ${{ secrets.SLACK_WEBHOOK_URL }}

  deploy:
    runs-on: ubuntu-latest

    needs: test  # Ensure the test job completes before starting the deploy job

    env:
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
      API_KEY: ${{ secrets.API_KEY }}
      ENVIRONMENT: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup SSH for deployment
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Deploy to production
        run: |
          ssh user@example.com 'cd /path/to/deployment && git pull origin main && npm install && npm run build'

# Error handling for the entire workflow
on:
  workflow_run:
    workflows: ["CI/CD Pipeline"]
    types:
      - completed
    branches:
      - main

jobs:
  error_notification:
    if: ${{ github.event.workflow_run.conclusion == 'failure' }}
    runs-on: ubuntu-latest
    steps:
      - name: Notify on failure
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"text":"❌ CI/CD Pipeline failed for the main branch. Check the workflow logs for details: ${{ github.event.workflow_run.url }}"}' ${{ secrets.SLACK_WEBHOOK_URL }}
